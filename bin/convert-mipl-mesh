#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import getpass

def parseArgv():
	parser = argparse.ArgumentParser(description="Convert a MIPL .pfb or .iv mesh for MER or MSL to .obj format.")

	parser.add_argument("-m", "--mipl-mesh-path", metavar=('MIPL_MESH_PATH'), required=True, help="The path of the mipl mesh to convert.")

	parser.add_argument("-d", "--output-directory", metavar=('OUTPUT_DIR'), required=True, help="The directory to write the obj file to.")

	args = parser.parse_args()

	return args


if __name__ == '__main__':

	args = parseArgv()

	if args.mipl_mesh_path is not None:
		miplMeshPath = args.mipl_mesh_path
	else:
		print("No mipl_mesh_path given")
		exit(1)

	if not os.path.isfile(miplMeshPath):
		print("file does not exist: %s" % miplMeshPath)
		exit(1)

	miplMeshPath = os.path.abspath(miplMeshPath)

	if args.output_directory is not None:
		outputDirectory = args.output_directory[0]
	else:
		print("No output_directory given")
		exit(1)	

	outputDirectory = os.path.abspath(outputDirectory)

	if not os.path.exists(outputDirectory):
		os.mkdir(outputDirectory)

	miplMeshDirectory = os.path.dirname(miplMeshPath)
	miplMeshFilename = os.path.basename(miplMeshPath)

	dockerInputDirectory = "/input"
	dockerOutputDirectory = "/output"
	inputMountString = "src=" + miplMeshDirectory + ",target=" + dockerInputDirectory + ",type=bind"
	outputMountString = "src=" + outputDirectory + ",target=" + dockerOutputDirectory + ",type=bind"
	dockerInputPath = os.path.join(dockerInputDirectory, miplMeshFilename)
	dockerImage = "mipl-mesh-converter"
	uidgid = ""
	if platform.system() == "Windows":
		uidgid = getpass.getuser()
	else:
		uid = os.getuid()
		gid = os.getgid()
		uidgid = str(uid) + ":" + str(gid)
	print("Processing %s, and writing obj to %s" % (miplMeshPath, outputDirectory))

	command = ['docker', 'run', '--rm', '-it', '--user', uidgid, '--mount', inputMountString, '--mount', outputMountString, dockerImage, dockerInputPath, dockerOutputDirectory]

	print subprocess.list2cmdline(command)
	subprocess.call(command)

	print("Done %s" % miplMeshPath)